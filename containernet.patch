diff -Naur containernet/ansible/install.yml containernet.doopnet/ansible/install.yml
--- containernet/ansible/install.yml	2017-12-06 15:18:06.595398437 +0000
+++ containernet.doopnet/ansible/install.yml	2017-12-06 15:13:34.472732590 +0000
@@ -15,8 +15,8 @@
    - name: add docker apt repo
      apt_repository: repo='deb https://apt.dockerproject.org/repo ubuntu-trusty main' state=present
 
-   - name: install docker-engine
-     apt: pkg=docker-engine state=installed update_cache=true
+   - name: install docker-ce
+     apt: pkg=docker-ce state=installed update_cache=true
      notify:
        - start docker
 
@@ -27,7 +27,7 @@
      pip: name=docker-py
 
    - name: built and install Dockernet (using Mininet installer)
-     shell: dockernet/util/install.sh
+     shell: containernet/util/install.sh
      args:
        chdir: ../../
 
@@ -42,4 +42,4 @@
 
   handlers:
     - name: start docker
-      service: name=docker state=started
\ No newline at end of file
+      service: name=docker state=started
diff -Naur containernet/mininet/net.py containernet.doopnet/mininet/net.py
--- containernet/mininet/net.py	2017-12-06 15:18:06.599398535 +0000
+++ containernet.doopnet/mininet/net.py	2017-12-06 15:11:48.002123860 +0000
@@ -112,13 +112,13 @@
 
 class Mininet( object ):
     "Network emulation with hosts spawned in network namespaces."
-
+    # QYS: /etc/hosts, hostname, doopnet folder
     def __init__( self, topo=None, switch=OVSKernelSwitch, host=Host,
                   controller=DefaultController, link=Link, intf=Intf,
                   build=True, xterms=False, cleanup=False, ipBase='10.0.0.0/8',
                   inNamespace=False,
                   autoSetMacs=False, autoStaticArp=False, autoPinCpus=False,
-                  listenPort=None, waitConnected=False ):
+                  listenPort=None, waitConnected=False, etcHostsFile=None, doopnetFolder=None ):
         """Create Mininet object.
            topo: Topo (topology) object or None
            switch: default Switch class
@@ -155,6 +155,15 @@
         self.nextCore = 0  # next core for pinning hosts to CPUs
         self.listenPort = listenPort
         self.waitConn = waitConnected
+        
+        # QYS: The file to save IP to hostname mapping
+        self.etcHostsFile = etcHostsFile
+        if self.etcHostsFile is not None:
+            self.hostsOut = open(self.etcHostsFile, 'w')
+            self.hostsOut.write('127.0.0.1\tlocalhost\n')
+            self.hostsOut.close()
+        # QYS: The doopnet folder on the host, which will be mount to /home/doopnet in the container
+        self.doopnetFolder = doopnetFolder
 
         self.hosts = []
         self.switches = []
@@ -170,7 +179,6 @@
         self.built = False
         if topo and build:
             self.build()
-
     def waitConnected( self, timeout=None, delay=.5 ):
         """wait for each switch to connect to a controller,
            up to 5 seconds
@@ -250,7 +258,9 @@
         Wrapper for addHost method that adds a
         Docker container as a host.
         """
-        return self.addHost( name, cls=Docker, **params)
+        
+        # QYS: for etc/hosts, doopnet folder
+        return self.addHost( name, cls=Docker, etcHostsFile=self.etcHostsFile, doopnetFolder=self.doopnetFolder, **params)
 
     def removeDocker( self, name, **params):
         """
@@ -594,6 +604,9 @@
         for host in self.hosts:
             info( host.name + ' ' )
             host.terminate()
+        # QYS: for /etc/hosts
+        if self.etcHostsFile is not None:
+            os.remove(self.etcHostsFile)
         info( '\n*** Done\n' )
 
     def run( self, test, *args, **kwargs ):
diff -Naur containernet/mininet/node.py containernet.doopnet/mininet/node.py
--- containernet/mininet/node.py	2017-12-06 15:18:06.599398535 +0000
+++ containernet.doopnet/mininet/node.py	2017-12-06 15:11:48.002123860 +0000
@@ -644,13 +644,28 @@
     http://techandtrains.com/2014/08/21/docker-container-as-mininet-host/
     We use the docker-py client library to control docker.
     """
-
-    def __init__(self, name, dimage, dcmd=None, **kwargs):
+    # QYS: /etc/hosts, hostname
+    def __init__(self, name, dimage, dcmd=None, hostExchangeFolder=None, etcHostsFile=None, doopnetFolder=None, **kwargs):
         self.dimage = dimage
         self.dnameprefix = "mn"
         self.dcmd = dcmd if dcmd is not None else "/bin/bash"
         self.dc = None  # pointer to the container
-
+        
+        # QYS: the folder for exchanging data between docker container and host
+        self.hostExchangeFolder = hostExchangeFolder
+        
+        # QYS: etc/hosts
+        self.etcHostsFile = etcHostsFile
+        self.hostname = name
+        self.ip = kwargs['ip']
+        
+        if self.etcHostsFile is not None:
+            self.hostsOut = open(self.etcHostsFile, 'a')
+            self.hostsOut.write('%s\t%s\n' % (self.ip, self.hostname))
+            self.hostsOut.close()
+        # QYS: doopnet foler
+        self.doopnetFolder = doopnetFolder
+        
         # setup docker client
         self.dcli = docker.Client(base_url='unix://var/run/docker.sock')
 
@@ -665,21 +680,62 @@
     def startShell( self, mnopts=None ):
         # creats host config for container
         # see: https://docker-py.readthedocs.org/en/latest/hostconfig/
-        hc = self.dcli.create_host_config(
-            network_mode=None,
-            privileged=True  # we need this mode to allow mininet network setup
-        )
+        # QYS: mount etcHostFile to /etc/hosts in container
+        #      mount doopnet to /home/doopnet
+        self.binds = {}
+        self.volumes = []
+        if self.etcHostsFile is not None:
+            self.binds = {self.etcHostsFile: {'bind': '/etc/hosts', 'mode': 'rw'}}
+            self.volumes.append('/etc/hosts')
+            
+        if self.doopnetFolder is not None:
+            self.binds[self.doopnetFolder] = {'bind': '/home/doopnet', 'mode': 'rw'}
+            self.volumes.append('/home/doopnet')
+
+        if self.hostExchangeFolder is not None:
+            self.binds[self.hostExchangeFolder] = {'bind': '/mnt/host-exchange', 'mode': 'rw'}
+            self.volumes.append('/mnt/host-exchange')
+        
+        if self.binds:    
+            hc = self.dcli.create_host_config(
+                binds=self.binds,
+                network_mode=None,
+                privileged=True  # we need this mode to allow mininet network setup
+            )
+        else:
+            hc = self.dcli.create_host_config(
+                network_mode=None,
+                privileged=True  # we need this mode to allow mininet network setup
+            )
+            
         # create new docker container
-        self.dc = self.dcli.create_container(
-            name="%s.%s" % (self.dnameprefix, self.name),
-            image=self.dimage,
-            command=self.dcmd,
-            stdin_open=True,  # keep container open
-            tty=True,  # allocate pseudo tty
-            environment={"PS1": chr(127)},  # does not seem to have an effect
-            network_disabled=True,  # we will do network on our own
-            host_config=hc
-        )
+        # QYS: /mnt/hostExchangeFolder, /etc/hosts, hostname, doopnet
+        if self.volumes:
+            self.dc = self.dcli.create_container(
+                hostname=self.hostname,
+                volumes=self.volumes,
+                name="%s.%s" % (self.dnameprefix, self.name),
+                image=self.dimage,
+                command=self.dcmd,
+                stdin_open=True,  # keep container open
+                tty=True,  # allocate pseudo tty
+                environment={"PS1": chr(127)},  # does not seem to have an effect
+                network_disabled=True,  # we will do network on our own
+                host_config=hc
+                )
+        else:
+            self.dc = self.dcli.create_container(
+                hostname=self.hostname,
+                name="%s.%s" % (self.dnameprefix, self.name),
+                image=self.dimage,
+                command=self.dcmd,
+                stdin_open=True,  # keep container open
+                tty=True,  # allocate pseudo tty
+                environment={"PS1": chr(127)},  # does not seem to have an effect
+                network_disabled=True,  # we will do network on our own
+                host_config=hc
+                )
+            
         # start the container
         self.dcli.start(self.dc)
         debug("Docker container %s started\n" % self.name)
diff -Naur containernet/util/install.sh containernet.doopnet/util/install.sh
--- containernet/util/install.sh	2017-12-06 15:18:06.603398632 +0000
+++ containernet.doopnet/util/install.sh	2017-12-06 15:14:11.561641256 +0000
@@ -21,6 +21,9 @@
   *) BUILD_DIR=$BUILD_DIR;;
 esac
 
+BUILD_DIR=$BUILD_DIR/build
+mkdir -p $BUILD_DIR
+
 # Location of CONFIG_NET_NS-enabled kernel(s)
 KERNEL_LOC=http://www.openflow.org/downloads/mininet
 
@@ -134,7 +137,7 @@
     fi
 
     echo "Installing Mininet core"
-    pushd $MININET_DIR/dockernet
+    pushd $MININET_DIR/containernet
     sudo make install
     popd
 }
@@ -161,11 +164,12 @@
     else
         $install git-core autotools-dev pkg-config libc6-dev
     fi
-    git clone git://openflowswitch.org/openflow.git
+    #git clone git://openflowswitch.org/openflow.git
+    git clone git://github.com/mininet/openflow
     cd $BUILD_DIR/openflow
 
     # Patch controller to handle more than 16 switches
-    patch -p1 < $MININET_DIR/dockernet/util/openflow-patches/controller.patch
+    patch -p1 < $MININET_DIR/containernet/util/openflow-patches/controller.patch
 
     # Resume the install:
     ./boot.sh
@@ -234,7 +238,7 @@
     # Copy coloring rules: OF is white-on-blue:
     echo "Optionally installing wireshark color filters"
     mkdir -p $HOME/.wireshark
-    cp -n $MININET_DIR/dockernet/util/colorfilters $HOME/.wireshark
+    cp -n $MININET_DIR/containernet/util/colorfilters $HOME/.wireshark
 
     echo "Checking Wireshark version"
     WSVER=`wireshark -v | egrep -o '[0-9\.]+' | head -1`
@@ -468,9 +472,9 @@
 
     # Apply patches
     git checkout -b tutorial-destiny
-    git am $MININET_DIR/dockernet/util/nox-patches/*tutorial-port-nox-destiny*.patch
+    git am $MININET_DIR/containernet/util/nox-patches/*tutorial-port-nox-destiny*.patch
     if [ "$DIST" = "Ubuntu" ] && version_ge $RELEASE 12.04; then
-        git am $MININET_DIR/dockernt/util/nox-patches/*nox-ubuntu12-hacks.patch
+        git am $MININET_DIR/containernet/util/nox-patches/*nox-ubuntu12-hacks.patch
     fi
 
     # Build
@@ -552,7 +556,8 @@
         $install libsnmp-dev libpcap-dev libconfig-dev
     fi
     cd $BUILD_DIR/
-    git clone git://gitosis.stanford.edu/oflops.git
+    #git clone git://gitosis.stanford.edu/oflops.git
+    git clone git://github.com/mininet/oflops
     cd oflops
     sh boot.sh || true # possible error in autoreconf, so run twice
     sh boot.sh
